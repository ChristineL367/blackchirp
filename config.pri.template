#Enable CUDA GPU support
CONFIG += gpu-cuda

#Enable hardware
CONFIG += hardware

#Enable LIF controls/acquisition
#CONFIG += lif

#Enable motor controls/acquisition
#CONFIG += motor

# Enabling this line will include all hardware files in compilation, even unused ones
# This is only for development purposes
#CONFIG += allhardware

#-----------------------------------------
# Library configuration
#
# You may need to specify custom paths etc
# for your OS. See qmake documentation for
# examples
#-----------------------------------------
unix:!macx: LIBS += -lqwt -lgsl -lm -lgslcblas


hardware {
#------------------------------------------------
# The following defines select hardware implementations.
#
# If you have not enabled the lif or motor options above,
# you can ignore their corresponding entries below
# -----------------------------------------------

# FTMW Oscilloscope (0 = virtual, 1 = DSA71604C, 2 = MSO72004C, 3 = M4i2220x8)
FTMWSCOPE=2

#AWG (0 = virtual, 1 = AWG70002A, 2 = AWG7122B, 3 = AD9914, 4=M8195A)
AWG=2

#Clocks. Include in a space-delimited list, up to 5 numbers
#For example:
#CLOCKS=0 0 1 3 2
CLOCKS=0 0

#Pulse generator (0 = virtual, 1 = Quantum Composers 9528+, 2 = Quantum Composers 9518)
PGEN=2
#pulse generator channel definitions (0 = A, 1 = B, etc...)
#Can set any of these to -1 to ignore, but some functionality may be limited.
#PGEN_AWG sets which channel is used to trigger the chirp. Helps locate chirp for phase correction
#PGEN_PROT sets which channel is used to trigger protection switch. Set to -1 if AWG generates the protection signal
#PGEN_AMP_GATE sets which channel controls amplifier gate. Set to -1 if this is done by AWG
PGEN_AWG=1
PGEN_PROT=2
PGEN_AMP_GATE=3
#num channels
PGEN_CHANNELS=8

#Flow Controller (0 = virtual, 1 = MKS 647C)
FC=1
#num channels
FC_CHANNELS=4

#IO Board (0 = virtual, 1 = Labjack U3)
IOBOARD=1

#GPIB controller (-1 = none, 0 = virtual, 1 = Prologix GPIB-LAN)
GPIB=-1

#pressure controller (-1 = none, 0 = virtual, 1 = Intellisys IQ Plus)
PC=-1

###### LIF ONLY #####
#LIF Oscilloscope (0 = virtual, 1 = DPO3012)
LIFSCOPE=1
##### END LIF ONLY #####

##### MOTOR ONLY #####
#Motor controller (0 = virtual, 1 = SCX11)
MOTOR=1

#Motor scope (0 = virtual, 1 = Pico2206B)
MOTORSCOPE=1
##### END MOTOR ONLY #####

} else {
#The values in this section should not be modified
FTMWSCOPE=0
AWG=0
CLOCKS=0 0
PGEN=0
PGEN_AWG=-1
PGEN_PROT=-1
PGEN_AMP_GATE=-1
PGEN_CHANNELS=8
FC=0
FC_CHANNELS=4
LIFSCOPE=0
IOBOARD=0
GPIB=0
PC=0
MOTOR=0
MOTORSCOPE=0
}


#------------------------------------------------
# Space for custom include/lib paths
#------------------------------------------------
motor {
	equals(MOTORSCOPE,1)|allhardware {
	LIBS += -L/opt/picoscope/lib/ -lps2000a
	INCLUDEPATH += /opt/picoscope/include/libps2000a-1.1/
	}
}

equals(IOBOARD,1)|allhardware {
	LIBS += -llabjackusb
}

equals(FTMWSCOPE,3)|allhardware {
     LIBS += -lspcm_linux
}


#------------------------------
# CUDA compiler configuration
#------------------------------
gpu-cuda {
	DEFINES += BC_CUDA

	# Cuda sources
	CUDA_SOURCES += gpuaverager.cu

	# Path to cuda toolkit install
	CUDA_DIR      = /usr/local/cuda
	INCLUDEPATH  += $$CUDA_DIR/include -isystem /usr/include/qt5 -isystem /usr/include/qt5/QtCore
	QMAKE_LIBDIR += $$CUDA_DIR/lib64
	CUDA_INC = $$join(INCLUDEPATH,' -I','-I',' ')
	CUDA_INT
	LIBS += -L$$CUDA_DIR/lib64 -lcuda -lcudart
	# GPU architecture
	CUDA_ARCH     = sm_50
        NVCCFLAGS     = --compiler-options -use_fast_math --ptxas-options=-v -Xcompiler -fPIC -Xcompiler -Wno-attributes

	CONFIG(debug, debug|release) {
		cuda_d.commands = $$CUDA_DIR/bin/nvcc -D_DEBUG -std=c++11 -m64 -O3 -arch=$$CUDA_ARCH -c $$NVCCFLAGS \
					   $$CUDA_INC ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT} \
					   2>&1 | sed -r \"s/\\(([0-9]+)\\)/:\\1/g\" 1>&2

		cuda_d.dependency_type = TYPE_C
		cuda_d.depend_command = $$CUDA_DIR/bin/nvcc -O3 -M $$CUDA_INC $$NVCCFLAGS   ${QMAKE_FILE_NAME}

		cuda_d.input = CUDA_SOURCES
		cuda_d.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.o
		QMAKE_EXTRA_COMPILERS += cuda_d
	}
	else {
		cuda.commands = $$CUDA_DIR/bin/nvcc -std=c++11 -m64 -O3 -arch=$$CUDA_ARCH -c $$NVCCFLAGS \
					 $$CUDA_INC $$LIBS ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT} \
					 2>&1 | sed -r \"s/\\(([0-9]+)\\)/:\\1/g\" 1>&2

		cuda.dependency_type = TYPE_C
		cuda.depend_command = $$CUDA_DIR/bin/nvcc -O3 -M $$CUDA_INC $$NVCCFLAGS   ${QMAKE_FILE_NAME}

		cuda.input = CUDA_SOURCES
		cuda.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.o
		QMAKE_EXTRA_COMPILERS += cuda
	}
}

#------------------------------------------------
# Do not modify the following
# -----------------------------------------------

lif {
	DEFINES += BC_LIF
	DEFINES += BC_LIFSCOPE=$$LIFSCOPE
}

motor {
	DEFINES += BC_MOTOR
	DEFINES += BC_MOTORCONTROLLER=$$MOTOR
		DEFINES += BC_MOTORSCOPE=$$MOTORSCOPE
}

DEFINES += BC_FTMWSCOPE=$$FTMWSCOPE
DEFINES += BC_AWG=$$AWG
DEFINES += BC_PGEN=$$PGEN BC_PGEN_AWGCHANNEL=$$PGEN_AWG BC_PGEN_PROTCHANNEL=$$PGEN_PROT BC_PGEN_AMPGATECHANNEL=$$PGEN_AMP_GATE BC_PGEN_NUMCHANNELS=$$PGEN_CHANNELS
DEFINES += BC_FLOWCONTROLLER=$$FC  BC_FLOW_NUMCHANNELS=$$FC_CHANNELS
DEFINES += BC_IOBOARD=$$IOBOARD

!equals(GPIB,-1) {
	DEFINES += BC_GPIBCONTROLLER=$$GPIB
}

!equals(PC,-1) {
        DEFINES += BC_PCONTROLLER=$$PC
}

equals(FTMWSCOPE,0) {
RESOURCES += virtualdata.qrc
}

CLOCK_HW = FixedClock Valon5009

for(num, 0..$$size(CLOCKS)) {
N = $$member(CLOCKS,$$num)
count(N,1) {
DEFINES += BC_CLOCK_$$num=$$member(CLOCK_HW,$$N)
}
}

contains(CLOCKS,0) {
DEFINES += BC_CLOCK_FIXED
}

contains(CLOCKS,1) {
DEFINES += BC_CLOCK_VALON5009
}
